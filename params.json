{"name":"Porthole","tagline":"JavaScript Library for Secure Cross Domain iFrame Communication","body":"<img src=\"http://cdn.ternarylabs.com/media/2011/03/porthole_210x209.jpg\" width=\"210\" height=\"209\" />\r\n\r\n[Porthole](https://github.com/ternarylabs/porthole/) is a small Javascript library that makes it safe and easy to communicate with cross domain iFrames. Porthole relies on hidden iFrames (later referred to a as proxy) to exchange information. The caller sets a url fragment with the message to pass. The proxy by virtue of being served from the same origin as the callee, invokes a callback method with an event object that contains the message read from the url fragment. The message signaling mechanism is based on a resize event.\r\n\r\nLearn more about [Porthole](http://ternarylabs.com/2011/03/27/secure-cross-domain-iframe-communication/).\r\n\r\n### Design Goals\r\nPorthole is designed with these goals in mind:\r\n\r\n* Small, only 5KB\r\n* Pure Javascript, does not rely on a framework\r\n* Work cross browser\r\n* Forward compatible, will use built-in [postMessage](https://developer.mozilla.org/en/DOM/window.postMessage) for modern browsers\r\n\r\n### Usage\r\nInclude the Javascript.\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"porthole.min.js\"></script>\r\n```\r\n\r\nCreate your content iFrame. This is where the guest content lives. Make sure to give it a name.\r\n\r\n```html\r\n<iframe id=\"guestFrame\" name=\"guestFrame\" src=\"http://other-domain.com/\">\r\n</iframe>\r\n```\r\n\r\nDefine an event handler if you want to receive messages.\r\n\r\n```javascript\r\nfunction onMessage(messageEvent) {  \r\n    /*\r\n   messageEvent.origin: Protocol and domain origin of the message\r\n   messageEvent.data: Message itself\r\n   messageEvent.source: Window proxy object, useful to post a response \r\n   */\r\n}\r\n```\r\n\r\nCreate a window proxy object on the main page.\r\n\r\n```javascript\r\nvar windowProxy;\r\nwindow.onload=function(){ \r\n    // Create a proxy window to send to and receive \r\n    // messages from the iFrame\r\n    windowProxy = new Porthole.WindowProxy(\r\n        'http://other-domain.com/proxy.html', 'guestFrame');\r\n\r\n    // Register an event handler to receive messages;\r\n    windowProxy.addEventListener(onMessage);\r\n};\r\n```\r\n\r\nCreate a window proxy object in the iFrame.\r\n\r\n```javascript\r\nvar windowProxy;\r\nwindow.onload=function(){ \r\n    // Create a proxy window to send to and receive \r\n    // messages from the parent\r\n    windowProxy = new Porthole.WindowProxy(\r\n        'http://parent-domain.com/proxy.html');\r\n\r\n    // Register an event handler to receive messages;\r\n    windowProxy.addEventListener(function(event) { \r\n        // handle event\r\n    });\r\n};\r\n```\r\n\r\nHost a proxy.html file on each domain. The proxy simply starts the dispatcher.\r\n\r\n```html\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\t<head>\r\n\t\t<!-- Replace the url with your own location -->\r\n\t\t<script type=\"text/javascript\" src=\"https://raw.github.com/ternarylabs/porthole/master/src/porthole.min.js\"></script>\r\n\t\t<script type=\"text/javascript\">\r\n\t\t\twindow.onload=function(){ Porthole.WindowProxyDispatcher.start(); };\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t</body>\r\n</html>\r\n```\r\n\r\nSend a message.\r\n\r\n```javascript\r\nwindowProxy.post({'action': 'supersizeme'});\r\n```\r\n\r\nNote that if you have multiple iFrames, you can create as many WindowProxy objects as needed.\r\n\r\n## Compatibility\r\n\r\n### Tested\r\n\r\n* Safari: 8\r\n* Firefox: 24\r\n* Chrome: 40\r\n* IE: 8, 9, 10, 11\r\n\r\n### Unsupported \r\n\r\n* IE: 7 (lack of JSON parser support).\r\n\r\n### Demo\r\nSee it in action at [http://sandbox.ternarylabs.com/porthole/](http://sandbox.ternarylabs.com/porthole/)\r\n\r\nBrought to you by [Ternary Labs](http://ternarylabs.com).","google":"UA-7142026-1","note":"Don't delete this file! It's used internally to help with page regeneration."}